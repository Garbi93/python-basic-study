# 함수
# 어떤 값들을 갖고 
# 함수에서 로직을 거치게 해 
# 특정 원하는 값으로 만들어주는 것을 함수라고 한다.

# 코딩에서 함수는 입력, 출력이 없는 경우도 있다.

# 함수를 사용하는 이유는 반복적인 작업을 할때 
# 한덩어리로 만들어 편리하게 작업을 하기 위해 사용하거나
# 자신이 작성한 프로그램을 기능 단위의 함수로 분리해 
# 흐름을 보기 쉽게 하는 것도 있다.

# 파이썬 함수의 구조
# def 함수 이름 (매개 변수):
#   수행할 문장1
#   수행할 문장2
#   ,,,

# def 는 python 에서 함수를 만들 때 사용하는 예약어 이며, 함수 이름은 만드는 사람이 임의로 만들 수 있다
# 매개 변수는 함수에 입력 값으로 전달 되는 값을 받는 변수 이다.
# 이렇게 함수안에서 if while for 문과 같은 것을 함수가 호출 되었을때 내부에서 실행 시켜준다.

# 간단함 함수 예)
def add (a, b):
    return a + b
# 이건 함수 만 정의 한 것 이고


# 함수 실행한 것을 호출 하는 부분
print(add(1,2)) # add 함수를 호출 하고 호출 할때에 매개변수 안에 1,2 를 넣어준 것 그리고 함수가 return 해주는 값을 print 해준다.

# 매개변수와 인수
# 매개변수와 인수는 사실 같은 것인데 주체가 누구냐에 따라 표현 방식이 달라진 것 뿐이다
# 받는 쪽(함수) 에서 사용하는 변수는 매개 변수
# 보내는 쪽 (함수를 호출) 에서 사용하는 값을 인수 라고 한다.

# ===================
# 일반적인 함수
def add1(a,b):
    result = a + b
    return result
# 일반적인 함수 구조에서는 위와 같이 매개변수가 있고 내부에서 작동하는 로직이 구현 되어있고, 반환 하는 값도 존재 한다.
# ===================

# ===================
# 입력 값이 없는 함수
def say():
    return "Hi" 
# 입력 값이 없는 함수인 경우 그냥 함수 자체가 호출 되면, 반환 값을 그냥 준다. 이때 매개 변수가 없으므로 인수를 전달 하려 하면 에러를 발생시킨다.
print("입력 값이 없는 함수: " + say()) 
# print(say(1)) # 이런식으로는 사용 못한다.
# ===================

# ===================
# 리턴 값이 없는 함수
def add2(a,b):
    print("%d, %d의 합은 %d 입니다." %(a,b,a+b))
# 이런식으로 특정 값으로 반환을 하지 않는 함수도 존재한다.
a = add2(3,4) # 하지만 함수 호출을 사용하면 함수 내부의 print 기능이 작동하여 자동으로 print 를 찍어준다.
print(a) # print는 해주지만 특정 반환 값이 없기 때문에 반환 값을 찍어보면 none 이 나오는것을 볼 수 있다.
# ===================

# 출력과 리턴은 다르단걸 인지하고 있자

# ===================
# 입력값도 리턴 값도 없는 함수
def noReturn():
    print("입력도 리턴도 없는 함수가 작동 했습니다.")
noReturn() # 단순 프린팅만 해준다.
# ===================

# ===================
# 매개변수의 값을 지정하여 호출하는 함수
def sub(a,b):
    return a - b
res1 = sub (b=1 , a=3) # 이런식으로 순서를 바꾸더라도 인수에 매개변수 값을 직접 지정하여 넣어줄수 있다.
print(res1)
# ===================

# ===================
# 입력값이 몇개일지 모를때 사용하는 함수
def add_money(*args): # *args 를 쓰면 아직 몇개가 들어올지는 모르지만 몇개든 받을 준비를 해준다.
    result = 0
    for i in args:
        result += i # args 로 받는 모든 값을 더한다.
    return result
print(add_money(1,2,3,4,5,6))
# ===================

# ===================
# 매개 변수가 지정된 것, 미지정된 것 을 동시에 받는 함수
def add_mul(choice, *args):
    if choice == "add": # 매개변수 choice 안에 "add" 가 있다면 더하기 실행
        result = 0
        for i in args:
            result += i
    elif choice == "mul": # choice 안에 "mul"이 있다면 곱하기 실행
        result = 1
        for i in args:
            result *= i
    return result

print(add_mul("mul", 1,2,3,4)) # 1개 짜리는 하나만 받고 *args 는 뒤에 몇개가 와도 다 받아준다.
print(add_mul("add", 1,2,3,4))
# ===================


