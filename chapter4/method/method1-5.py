# 메서드 범위 안의 변수 효력범위
# 변수 수명

a = 1
def vartest(a):
    a = a + 1 

vartest(a)
print(a)
# 함수를 실행 시켰는데 a 를 출력하면 1 이 나온것을 볼 수 있다.

# 이런 이유는 함수가 실행 되고 밖의 a 변수에 직접 영향을 주지 않고 함수 내부에서만 끝났기 때문이다.
# 지역변수는 함수안에서만 사용 되고 종료시 같이 사라진다.


# =====================================================
# 지역 변수 변경 내역을 전역 변수에 적용하는 법
# 1. return 사용하여 저장하기
b = 1 
def vartest_b(b):
    b = b + 1 
    return b
b = vartest_b(b) # 리턴 받은 값을 전역변수에 넣어주면
print("b: " + str(b)) # 전역변수 값이 1 이 아닌 2로 출력 된다.

# =====================================================
# 2. global 명령어 사용하기 (비 권장)
c = 1
def vartest_c():
    global c # 전역변수 c 를 직접 갖고 오게 사용
    c = c + 3
vartest_c()
print("c: " + str(c))
# c 가 바뀐것을 볼 수 있는데
# 이런식으로 global 을 사용하여 코드를 작성하는것은 권장하지 않는다.

# =====================================================
# 그런데 신기한게 mutable 자료형 (리스트 딕셔너리 집합) 에서는 지역변수에서 사용한것이 전역변수에 영향을 준다
list1 = [1,2,3]
def listTest1(list1):
    list1 = list1.append(4) # .append 과정이 깊은 매개변수 list1 의 주소 값을 직접 찾아가 영향을 주기 때문에 전역 변수에 영향이 생기게 된다.
listTest1(list1)
print(list1) # 내부에서 append 를 사용한 것이 전역변수도 영향을 받는다.

# ======================================================
# 추가로 알아둘것 append 함수는 return 값이 없다 특정 값 변경 행위만 시킬뿐 
# 예) 
a1 = [1,2,3,4]
b1 = a1.append(5) # append를 했기 때문에 b1 에 무언가 들어갔을꺼 같지만 append 는 return 값이 없다
print(b1) # return 이 없어서 none 이 출력
print(a1) # a1은 append 당해서 값 변경이 생김

# ======================================================
# 반대로 pop 함수는 return 값이 존재한다
# 예) 
a2 = [1,2,3,4]
b2 = a2.pop() # pop 은 반환값이 있기 때문에 값을 넣어준다.
print(b2) # pop 된 대상을 출력 한다.
print(a2) # a1이 pop 당한 상태를 출력해준다.
