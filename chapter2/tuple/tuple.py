# 튜플 자료형 
# 리스트와 거의 비슷한 형태
# 리스트를 사용하는 이유?
# 리스트 => a = [1, 2, 3] // 튜플 => b = (1, 2, 3)
# 리스트는 선언을 하면 자유롭게 변경이 가능하지만 
# 튜플은 선언 후 변경이 불가능 ?? 하다.
# 약간 let const  차이 인듯 하다.

# 파이썬에서는 mutable, immutable 자료형으로 구분을 한다
# mutable => (리스트, 딕셔너리, 집합) 변경, 변형이 가능한것
# immutable => (정수, 실수, 문자열, 튜플) 변경이 불가능한 것 

# 튜플 생성 방법
t1 = ()
t2 = (1,) # 튜플 사용시 1개의 값만 들어갈때는 뒤에 , 를 붙여주어야 한다.
t22 = (1)
print("','를 안 붙이면: " + str(type(t22))) # 한개만 들어갈때 , 를 안 붙이면 int 로 인식한다.
t3 = (1, 2, 3)
t4 = 1, 2, 3 # 괄호 없이도 생성 가능하다.
t5 = ('a', 'b', ('ab', 'cd')) # 리스트와 마친가지로 튜플 안에 튜플을 넣을수 있다.
# 이렇게 생성 할 수 있다.
print(type(t4))

# 튜플 인덱스 값 가져오기
print(t4[0]) # 인덱스 값 가져올때는 리스트 처럼 사용하여 가져온다.

# 튜플 요서를 삭제하려 하면??
t1 = (1, 2, 'a', 'b')
# del t1[0] # 이렇게 삭제 하려 하면 예외를 발생 시킨다.

# 튜플 인덱싱
print(t1[0])
print(t1[1])
print(t1[2])

# 튜플 슬라이싱 
print("슬라이싱 작동: " + str(t1[1:])) # 슬라이싱 개념은 요소의 값을 직접 변경 하는게 아니어서 가능하다
print("슬라이싱 후 t1 원본??: " + str(t1)) # t1 을 출력 하면 슬라이싱 전 모습 그래도 나오는 것을 볼 수 있다.

# 튜플 더하기
t1 = (1, 2, 'a', 'b')
t2 = (3, 4)
t3 = t1 + t2
print(t3) # 튜플 더하기 실행 자체는 가능하다. 이유는 실제 튜플 변수에 직접 변경이 이루어 지지 않기 때문에 더하기 연산 자체는 가능하며 
print(type(t3)) # 더해진 것의 타입은 튜플로 만들어진다.

# 튜플 곱하기
# 더하기와 마찬가지로 직접 변형을 하지 않기 때문에 가능하다.
t3 = t2 *3
print(t3)

# 튜플 길이 구하기
print("튜플 t3의 길이는: " + str(len(t3)))

# 튜플은 요솟값 변경할수 없기 때문에 sort, insert, remove, pop 과 같은 내장 함수 기능이 없다.
