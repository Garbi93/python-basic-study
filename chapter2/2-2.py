# 2-2 문자열 자료형 데이터

a = "Life is too short, You need Python"
b =  "a"
c =  "123"
print(type(a)) # a 의 타입을 출력 해 보면 class 'str' 이라고 나오며 문자열 이란 것을 알 수 있다.
# 따옴표로 감싸진 리터럴 값들은 문자로 인식 한다.

d = 'Life is "too" short'
print(d) # 큰 따옴표로 강조 하고 싶은 구문이 생긴다면 가장 외각에 작은 따옴표로 감싸주면 출력이 가능하다.

e = " life is \" too short"
print(e) # 특수 기호를 넣고 싶으면 해당 기호 앞에 백슬레시를 넣어주면 출력 가능하다.

f = "life is \ntoo short"
print(f) # 줄바꿈을 쓰고 싶으면 역슬레시 + n 을 추가하면 줄 바꿈을 해준다.

g = '''
여러줄을 
만들었을때도 
인식을??''' 
print(g) # 여러줄을 작성 하고 싶을때는 따옴표 3개를 붙여 그 안에 내용 을 작성해주면 된다. (줄 바꿈도 인식)

# 문자열 연산하기
head = "python"
tail = " is fun!"
print(head + tail) # 문자열 합치기 
print(head * 3) # 문자열 곱하기를 하면 반복해서 출력 한다. (단 문자열과 숫자열 끼리의 곱만 가능하다.)

# 문자열 길이 구하기 len()
print(len(head)) # 문자열의 길이를 출력 해준다.

# 문자열의 인댁싱
print(a[3]) # 대괄호 안에 인덱스 3번을 출력한다. (인덱스는 1부터가 아닌 0부터 카운트 시작한다.)
print(a[-1]) # 음수를 넣으면 뒤에서 부터 센다 (이때는 또 1부터 인식하네??)
#print(a[-35]) # 범위를 벗어나는 음수는 에러를 출력한다.

# 문자열 슬라이싱 (범위를 잘라낸다는 뜻)
print(a[0:4]) # 1슬라이스 인 경우 => a[이상:미만] 2개 이상의 슬라이스인 경우 => a[이상:미만:간격]을 나타낸다.
print(a[19:]) # 이렇게 작성하면 19번째 인덱스 이상 부터 끝까지 출력 한다.
print(a[::2]) # 2 칸마다 1개씩 출력하게 되므로 L 나오고 i 생략 f 나오고 e 생략 이런식으로 출력이 된다.
print(a[::-2]) # 음수를 넣으면 뒤에서부터 간격을 세면서 출력이 된다.
# 슬라이싱 활용 하기
day = "20230331Rainy" # 문자열 데이터에 날짜와 날씨를 따로 구분하여 저장 하고 싶을 때
date = day[:8] # 처음 부터 8번 인덱스까지
weather = day[8:] # 8번 인덱스 부터 끝 까지 
print(date)
print(weather)
# 문자열은 불변경형 자료형이다. => 이로 인해 오타를 수정 하게 되면 오류가 발생한다고 한다.

# ==========================================================================================================================================================

# 문자열 포매팅 => 일정한 규칙을 정하고 일부를 변경하는 방식
test1 =  "I eat %d apples." % 3  # %d 는 데시멀을 나타내고 사람이 사용하는 10 진수를 인식 시킨다 문자열 내에 %d 를 쓴후
# 뒤에 % 숫자 를 넣으면 해당 위치에 넣은 숫자가 들어가게 된다.
print(test1)
test2 = "I eat %s apples." % "five" # %s 는 문자열 데이터를 해당 위치에 문자열 자료를 넣어주는 것을 인식하고,
# 뒤에 % "문자데이터" 를 넣으면 해당 위치에 넣은 문자 자료가 들어가게 된다.
print(test2)
# 변수를 넣는것도 가능하다
number = 3
text = "four"
test3 = "I eat %d apples." % number # 이런 식으로 변수를 넣을 수 있지만 타입은 지켜줘야 한다 안지켜줄시 에러를 발생시킨다.
print(test3)
# 여러 변수 넣기
count = 10
day = "three"
test4 = "I ate %d apples. so I was sick for %s days." % (count, day) # 여러 번수를 넣을때는 뒤에 값을 괄호로 감싸서 넣어준다.
print(test4)
# 단 %s 는 타입을 가리지 않고 받는다고 한다. => 문자열 타입을 받는것 이긴 하지만 맞지 않으면 다 문자열로 변환해서 넣는거 같다.
# % 를 문자열 포메팅에 넣고 싶다면 %를 두번 써주면 된다
test5 = "퍼센트 테스트 %d%%" % count # 해당 기능은 파이썬 3.6 이상부터 사용 가능하다.
print(test5)
# 포메팅 에 숫자를 추가하면 => 정렬과 공백을 나타낸다.
test6 = "%10s" % "hi" # hi를 포함한 길이 10 만큼의 데이터를 갖는다.
print(test6)
test7 =  "%-10sjane" % "hi" # -10 의 의미는 hi 가 제일 왼쪽에 오고 나머지 8칸을 공백으로 넣겠다는 것을 의미 한다. (잘 안쓴다고 한다.)
print(test7) 
test8 = "%10sjane" % "hi" # 양수 10 을 넣으니 hi 와 jane 이 붙은것을 볼 수 있다.
print(test8)
test9 = "%0.4f" % 3.141592 # 소숫점 4째 자릿 수 까지 출력하게 잘라준다.
print(test9)

# 다른방식으로 포메팅 하기
test10 = "I eat {0} apples.".format(3) # 값의 타입을 구분 하지 않고 중괄호 안에 들어갈 값의 인덱스 번호를 넣어주면 알맞게 넣은 값들이 알아서 들어가게 된다.
print(test10)
test11 = "I ate {1} apples. so I was sick for {0} days.".format(3, "three") # 이렇게 여러개를 넣어도 중괄호 숫자를 바꾸면 알아서 들어간다.
test12 = "I ate {0} apples. so I was sick for {1} days.".format(3, "three") # 이렇게 여러개를 넣어도 중괄호 숫자를 바꾸면 알아서 들어간다.
print(test11)
print(test12)
test12 = "I ate {number} apples. so I was sick for {day} days.".format(number = 3, day = "three") # 중괄호 안에 변수를 넣어서 사용도 가능하다.

# 문자열 정렬 
test13 = "{0:<10}".format("hi") # < 는 왼쪽 정렬 총 10칸 
print(test13)
test13 = "{0:>10}".format("hi") # > 는 오른쪽 정렬 총 10칸
print(test13)
test13 = "{0:^10}".format("hi") # ^ 는 가운데 정렬 총 10칸
print(test13)
# 공백으 특정 값으로 채우기
test14 = "{0:=^10}".format("hi") # ^ > < 앞에 특정 값을 넣으면 해당 값으로 채워 넣는다.
print(test14)

# 포메팅 언어에서 중괄호를 추가 하고 싶을때 => 중괄호를 한번더 감 싸주면 된다.
test15 = "{{and}}".format()
print(test15)

# f 문자열 포메팅 => 포메팅에서는 이것만 외워도 괜찮다고 한다. 파이썬 3.6버전 이상부터 사용 가능
name = '홍길동'
age = 30
test16 = f"나의 이름은 {name} 입니다. 나이는{age}입니다." # 문자열 앞에 f 를 붙이면 포메팅 으로 인식하게 된다.
print(test16)
test17 = f"나는 내년에 {age + 1}살이 된다." # 이런식으로 포메팅을 사용하면 변수에 연산을 하여 출력도 가능하다.
print(test17)

# ==========================================================================================================================================================

# 문자열의 함수